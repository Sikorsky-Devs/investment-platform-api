generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ContactType {
  PHONE
  EMAIL
  VIBER
  TELEGRAM
  WHATSAPP
  FACEBOOK
  ADDRESS
  OTHER
}

enum CurrencyType {
  UAH
  USD
  EUR
  GBP
}

enum ProjectType {
  INVESTMENT
  DONATION
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  firstName        String?      @map("first_name")
  middleName       String?      @map("middle_name")
  lastName         String?      @map("last_name")
  name             String?      @map("name")
  description      String?      @map("description")
  password         String
  role             Role         @default(USER)
  isApproved       Boolean      @default(false)
  isLegal          Boolean      @default(false)
  avatarLink       String?      @map("avatar_link")
  conatacts        Contact[]
  projects         Project[]
  investments      Investment[]
  posts            Post[]
  comments         Comment[]
  senderMessages   Message[]    @relation("Sender")
  receiverMessages Message[]    @relation("Receiver")

  @@map("users")
}

model Contact {
  id      String      @id @default(uuid())
  userId  String      @map("user_id")
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  type    ContactType @map("type")
  content String      @map("content")

  @@map("contacts")
}

model Project {
  id            String       @id @default(uuid())
  name          String
  estimatedCost Float        @map("estimated_cost")
  currencyType  CurrencyType @map("currency_type")
  projectType   ProjectType  @map("project_type")
  description   String?
  address       String?
  userId        String       @map("user_id")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now()) @map("created_at")
  photos        Photo[]
  products      Product[]

  @@map("projects")
}

model Photo {
  id        String  @id @default(uuid())
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  link      String
  isMain    Boolean @default(false) @map("is_main")

  @@map("photos")
}

model Product {
  id          String       @id @default(uuid())
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  amount      Float
  investments Investment[]

  @@map("products")
}

model Investment {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  createdAt DateTime @default(now()) @map("created_at")

  @@map("investments")
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  Comment   Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("comments")
}

model Message {
  id         String   @id @default(uuid())
  senderId   String   @map("sender_id")
  sender     User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String   @map("receiver_id")
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  content    String
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("messages")
}
